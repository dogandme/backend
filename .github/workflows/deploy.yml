# 1 워크플로의 이름 지정
name: CI and Deploy to Amazon EC2

# 2 워크플로가 시작될 조건 지정 
on:
  push:
    branches: [ develop ]
env:
  # 버킷에 저장할 폴더 이름
  PROJECT_NAME: BE_Server
  # S3 버킷 이름
  BUCKET_NAME: mungwithme-github-action-s3
  # CodeDeploy의 애플리케이션 이름
  CODE_DEPLOY_APP_NAME: mungwithme-be-app
  # CodeDeploy의 배포그룹 이름
  DEPLOYMENT_GROUP_NAME: mungwithme-be-app-deployment-group
permissions:
  contents: read
 
jobs:
  build:
    # 3 실행 환경 설정
    runs-on: ubuntu-latest

    # 4 차례대로 실행
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    # 필요한 YAML 파일들 생성
    - name: Create application-db.yml
      run: touch ./src/main/resources/application-prd.yml
    - name: Populate application-prd.yml
      run: echo "${{ secrets.APPLICATION_PRD }}" > ./src/main/resources/application-prd.yml

    - name: Create application-jwt.yml
      run: touch ./src/main/resources/application-jwt.yml
    - name: Populate application-jwt.yml
      run: echo "${{ secrets.APPLICATION_JWT }}" > ./src/main/resources/application-jwt.yml

    - name: Create application-oauth.yml
      run: touch ./src/main/resources/application-oauth.yml
    - name: Populate application-oauth.yml
      run: echo "${{ secrets.APPLICATION_OAUTH }}" > ./src/main/resources/application-oauth.yml

    - name: Create application-google.yml
      run: touch ./src/main/resources/application-google.yml
    - name: Populate application-google.yml
      run: echo "${{ secrets.APPLICATION_GOOGLE }}" > ./src/main/resources/application-google.yml
    
    # Gradle build (Test 제외)
    - name: Build with Gradle
      run: ./gradlew clean build -x test
      
    # 압축 파일 만들기
    - name: Make Zip File
      run: zip -qq -r ./$GITHUB_SHA.zip .
      shell: bash
      
    # AWS 인증
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2
      
    # S3 버킷으로 파일을 업로드, 기존 파일 삭제
    - name: Upload to S3
      # run: aws s3 sync . s3://$BUCKET_NAME/$PROJECT_NAME/ --region ap-northeast-2 --delete
      run: |
        aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://$BUCKET_NAME/$GITHUB_SHA.zip \
          --source .


    # S3 버킷에 업로드 된 파일을 대상으로 CodeDeploy에서 배포 요청
    - name: Code Deploy
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
      # run: aws deploy create-deployment --application-name $CODE_DEPLOY_APP_NAME --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name $DEPLOYMENT_GROUP_NAME --s3-location bucket=$BUCKET_NAME,bundleType=zip,key=$PROJECT_NAME/$GITHUB_SHA.zip
